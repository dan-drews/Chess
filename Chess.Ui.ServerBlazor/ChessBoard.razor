@using ChessLibrary
@inject IJSRuntime JS;
<h3>ChessBoard</h3>

@code {

    Game g;
    List<(Files f, int rank)> TargetedSquares = new List<(Files f, int rank)>();
    SquareState selectedSquare;
    Engine.NodeInfo node;
    int depth;

    bool isCustomizing = false;

    protected override void OnInitialized()
    {
        if (g == null)
        {
            g = new Game(ChessLibrary.Enums.BoardType.BitBoard);
            g.ResetGame();
        }
    }

    async Task Load()
    {
        var lines = System.IO.File.ReadAllLines("GameSave.txt");
        foreach (var line in lines)
        {
            if (line != string.Empty)
            {
                var moveParts = line.Split('→');
                var startingSquare = ParseSquare(moveParts[0].Trim());
                var endingSquare = ParseSquare(moveParts[1].Trim());

                var move = new Move(startingSquare.Piece, startingSquare.Piece.Color, startingSquare.Square, endingSquare.Square)
                {
                    CapturedPiece = endingSquare.Piece
                };

                g.AddMove(move, false);

            }
        }
    }

    SquareState ParseSquare(string sq)
    {
        char fileStr = sq.ToUpper().ToCharArray()[0];
        Files f;
        switch (fileStr)
        {
            case 'A':
                f = Files.A;
                break;
            case 'B':
                f = Files.B;
                break;
            case 'C':
                f = Files.C;
                break;
            case 'D':
                f = Files.D;
                break;
            case 'E':
                f = Files.E;
                break;
            case 'F':
                f = Files.F;
                break;
            case 'G':
                f = Files.G;
                break;
            case 'H':
                f = Files.H;
                break;
            default:
                throw new Exception("Invalid File");
        }

        char rankStr = sq.ToCharArray()[1];
        int rank = int.Parse(rankStr.ToString());

        return g.Board.GetSquare(f, rank);
    }

    async Task GenerateMove()
    {
        try
        {
            (node, depth) = Engine.GetBestMove(g, g.PlayerToMove);
            g.AddMove(node.Move);
            await JS.InvokeAsync<string>("PlaySound");
        }
        catch (Exception ex)
        {
            await JS.InvokeAsync<string>("alert", ex.Message);
        }

        if (g.IsGameOver)
        {
            await JS.InvokeAsync<string>("alert", "Game Over!");
        }
    }

    async Task UndoMove()
    {
        try
        {
            g.UndoLastMove();
            await JS.InvokeAsync<string>("PlaySound");
        }
        catch (Exception ex)
        {
            await JS.InvokeAsync<string>("alert", ex.Message);
        }

    }

    async Task Reset()
    {
        try
        {
            while (g.Moves.Any())
            {
                g.UndoLastMove();
            }
            await JS.InvokeAsync<string>("PlaySound");
        }
        catch (Exception ex)
        {
            await JS.InvokeAsync<string>("alert", ex.Message);
        }
    }

    async Task SetCustomPiece(SquareState s)
    {
        if (s.Piece == null)
        {
            string promptPieceName = null;
            promptPieceName = await JS.InvokeAsync<string>("prompt", "What kind of piece would you like? B,Q,R,N,P,K,b,q,r,n,p,k");
            while (promptPieceName == null || !new string[] { "b", "q", "r", "n", "p", "k" }.Contains(promptPieceName.ToLower()))
            {
                promptPieceName = await JS.InvokeAsync<string>("prompt", "What kind of piece would you like? B,Q,R,N,P,K,b,q,r,n,p,k");
            }
            var piece = new Piece();
            if (promptPieceName.ToUpper() == promptPieceName)
            {
                piece.Color = Colors.White;
            }
            else
            {
                piece.Color = Colors.Black;
            }

            switch (promptPieceName.ToLower())
            {
                case "b":
                    piece.Type = PieceTypes.Bishop;
                    break;
                case "q":
                    piece.Type = PieceTypes.Queen;
                    break;
                case "r":
                    piece.Type = PieceTypes.Rook;
                    break;
                case "n":
                    piece.Type = PieceTypes.Knight;
                    break;
                case "p":
                    piece.Type = PieceTypes.Pawn;
                    break;
                case "k":
                    piece.Type = PieceTypes.King;
                    break;
            }
            g.Board.SetPiece(s.Square.File, s.Square.Rank, piece.Type, piece.Color);
        }
        else
        {
            g.Board.ClearPiece(s.Square.File, s.Square.Rank);
        }
    }

    async Task HandleSquareClick(SquareState s)
    {
        if (isCustomizing)
        {
            await SetCustomPiece(s);
            return;
        }
        Console.WriteLine($"{s.Square.Rank}{s.Square.File}");
        Console.WriteLine(s.Piece);
        Console.WriteLine(selectedSquare);
        if (s.Piece != null && selectedSquare == null && s.Piece.Color == g.PlayerToMove)
        {
            TargetedSquares.Clear();
            selectedSquare = s;
            var moves = g.Evaluator.GetAllLegalMoves(g.Board, s, g.Moves, false);
            foreach (var m in moves)
            {
                TargetedSquares.Add((m.DestinationSquare.File, m.DestinationSquare.Rank));
            }
        }
        else
        {
            if (selectedSquare != null)
            {
                if (TargetedSquares.Contains((s.Square.File, s.Square.Rank)))
                {
                    string promotedPieceName = null;
                    Piece promotedPiece = null;
                    if (selectedSquare.Piece.Type == PieceTypes.Pawn
                        && ((s.Square.Rank == 8 && selectedSquare.Piece.Color == Colors.White) || (s.Square.Rank == 1 && selectedSquare.Piece.Color == Colors.Black)))
                    {
                        // promotion......
                        promotedPieceName = await JS.InvokeAsync<string>("prompt", "What kind of piece would you like? B,Q,R,N");
                        while (promotedPieceName == null || !new string[] { "b", "q", "r", "n" }.Contains(promotedPieceName.ToLower()))
                        {
                            promotedPieceName = await JS.InvokeAsync<string>("prompt", "What kind of piece would you like? B,Q,R,N");
                        }

                        switch (promotedPieceName.ToLower())
                        {
                            case "b":
                                promotedPiece = new Piece() { Color = selectedSquare.Piece.Color, Type = PieceTypes.Bishop };
                                break;
                            case "q":
                                promotedPiece = new Piece() { Color = selectedSquare.Piece.Color, Type = PieceTypes.Queen };
                                break;
                            case "r":
                                promotedPiece = new Piece() { Color = selectedSquare.Piece.Color, Type = PieceTypes.Rook };
                                break;
                            case "n":
                                promotedPiece = new Piece() { Color = selectedSquare.Piece.Color, Type = PieceTypes.Knight };
                                break;
                        }
                    }
                    try
                    {
                        var moves = g.Evaluator.GetAllLegalMoves(g.Board, selectedSquare, g.Moves, false);
                        var m = moves.Where(x => x.DestinationSquare.Rank == s.Square.Rank && x.DestinationSquare.File == s.Square.File && x.PromotedPiece?.Type == promotedPiece?.Type);
                        g.AddMove(m.FirstOrDefault());
                        await JS.InvokeAsync<string>("PlaySound");
                    }
                    catch (Exception ex)
                    {
                        await JS.InvokeAsync<string>("alert", ex.Message);
                    }
                }

                if (g.IsGameOver)
                {
                    await JS.InvokeAsync<string>("alert", "Game Over!");
                }
            }
            selectedSquare = null;
            TargetedSquares.Clear();
        }
    }

    string GetSquareColor(Square sq)
    {
        const string lightBlue = "#6a7283";
        const string darkBlue = "#29303d";
        const string lightRecent = "#62819b";
        const string darkRecent = "#405f76";

        if (g.Moves.Any())
        {

            if ((sq.Rank == g.Moves.Last().StartingSquare.Rank && sq.File == g.Moves.Last().StartingSquare.File) ||
               (sq.Rank == g.Moves.Last().DestinationSquare.Rank && sq.File == g.Moves.Last().DestinationSquare.File))
            {
                return sq.Color == Colors.White ? lightRecent : darkRecent;
            }
        }

        return sq.Color == Colors.White ? lightBlue : darkBlue;
    }

    void Customize()
    {
        isCustomizing = !isCustomizing;
    }
}

<h1>Score: @(g.GetScore(Colors.White) - g.GetScore(Colors.Black))</h1>
@if (node != null)
{
<h4>Analysis Score: @node.Score</h4>
<h4>Analysis Depth: @depth</h4>
<h4>Nodes Evaluated: @Engine.nodesEvaluated</h4>
<h4>Time: @Engine.miliseconds</h4>
<h4>Skips: @Engine.skips</h4>
}
<audio id="sound" src="/click.mp3" />
<table style="border: 1px solid black;">
    @for (int i = 8; i >= 1; i--)
    {
    <tr>
        <td>@i</td>
        @for (Files f = Files.A; f <= Files.H; f++)
            {
                SquareState state = g.Board.GetSquare(f, i);
        <td style="height: 100px; width: 100px; background-color: @(GetSquareColor(state.Square)); color:@(state.Piece?.Color == Colors.White ? "white" : "black"); stroke: @(state.Piece?.Color == Colors.White ? "black" : "white"); stroke-width: 20; font-size: 50px; text-align: center" @onclick="() => HandleSquareClick(state)">
            @if (state.Piece != null)
                    {
                        if (state.Piece.Type == PieceTypes.Pawn)
                        {
            <span>
                <i class="fas fa-chess-pawn"></i>
            </span>
                        }
                        else if (state.Piece.Type == PieceTypes.Rook)
                        {
            <span>
                <i class="fas fa-chess-rook"></i>
            </span>
                        }
                        else if (state.Piece.Type == PieceTypes.Knight)
                        {
            <span>
                <i class="fas fa-chess-knight"></i>
            </span>
                        }
                        else if (state.Piece.Type == PieceTypes.Bishop)
                        {
            <span>
                <i class="fas fa-chess-bishop"></i>
            </span>
                        }
                        else if (state.Piece.Type == PieceTypes.Queen)
                        {
            <span>
                <i class="fas fa-chess-queen"></i>
            </span>
                        }
                        else if (state.Piece.Type == PieceTypes.King)
                        {
            <span>
                <i class="fas fa-chess-king"></i>
            </span>
                        }
                    }
            @if (TargetedSquares.Any(x => x.f == f && x.rank == i))
                    {
            <span style="color:white">X</span>
                    }
        </td>
            }
    </tr>
    }
    <tr>
        <td style="text-align: center"></td>
        <td style="text-align: center">A</td>
        <td style="text-align: center">B</td>
        <td style="text-align: center">C</td>
        <td style="text-align: center">D</td>
        <td style="text-align: center">E</td>
        <td style="text-align: center">F</td>
        <td style="text-align: center">G</td>
        <td style="text-align: center">H</td>
    </tr>
</table>
@if(!isCustomizing){
<button @onclick="GenerateMove">Generate Next Move</button>
<button @onclick="UndoMove">Undo</button>
<br />
<br />
<br />
<br />
<br />
<br />
<button @onclick="Load">Load</button>
<button @onclick="Reset">Reset</button>
}
<button @onclick="Customize">Customize</button>
<div>
    <h2>Moves</h2>
    @foreach (var m in g.Moves)
    {
    <p>@($"{m.StartingSquare.File}{m.StartingSquare.Rank} → {m.DestinationSquare.File}{m.DestinationSquare.Rank}")</p>
    }
</div>